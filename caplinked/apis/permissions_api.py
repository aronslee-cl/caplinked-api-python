# coding: utf-8

"""
    CapLinked API v1.0

    Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.

    OpenAPI spec version: 2017-05-23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PermissionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_permissions_folders_id(self, id, workspace_id, group_id, **kwargs):
        """
        List subfolder permissions
        List subfolder permissions for a group. Will return an array of subfolders under the specified folder, along with their permissions information. For is_mixed_view, is_mixed_download, and is_mixed_upload: if attribute is set to true, it indicates that at least one (but not all) child folder with view, download, or upload attributes set to true, respectively. \"All Folders\" is the parent of all other folders within the workspace; its permissions will be returned if a folder is not specified.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_permissions_folders_id(id, workspace_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of folder (0 for root) (required)
        :param int workspace_id: ID of workspace (required)
        :param int group_id: ID of group (required)
        :return: FolderList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_permissions_folders_id_with_http_info(id, workspace_id, group_id, **kwargs)
        else:
            (data) = self.get_permissions_folders_id_with_http_info(id, workspace_id, group_id, **kwargs)
            return data

    def get_permissions_folders_id_with_http_info(self, id, workspace_id, group_id, **kwargs):
        """
        List subfolder permissions
        List subfolder permissions for a group. Will return an array of subfolders under the specified folder, along with their permissions information. For is_mixed_view, is_mixed_download, and is_mixed_upload: if attribute is set to true, it indicates that at least one (but not all) child folder with view, download, or upload attributes set to true, respectively. \"All Folders\" is the parent of all other folders within the workspace; its permissions will be returned if a folder is not specified.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_permissions_folders_id_with_http_info(id, workspace_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of folder (0 for root) (required)
        :param int workspace_id: ID of workspace (required)
        :param int group_id: ID of group (required)
        :return: FolderList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id', 'group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_permissions_folders_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_permissions_folders_id`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_permissions_folders_id`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_permissions_folders_id`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'workspace_id' in params:
            query_params.append(('workspace_id', params['workspace_id']))
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/permissions/folders/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FolderList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_permissions_folders_id(self, id, workspace_id, group_id, verb, folder_action, **kwargs):
        """
        Update folder permissions
        Update folder permissions for a group. View = TRUE, this means that group members can return the folder/file and its viewer image. Download = TRUE, this means tha that group members can create download containing the folder. Upload = TRUE, this mean that group members can create an upload object with the folder as a parent.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_permissions_folders_id(id, workspace_id, group_id, verb, folder_action, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of folder (0 for root) (required)
        :param int workspace_id: ID of workspace (required)
        :param int group_id: ID of group (required)
        :param str verb: Grant or revoke permission for folder (required)
        :param str folder_action: Permission type for folder (required)
        :return: FolderUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_permissions_folders_id_with_http_info(id, workspace_id, group_id, verb, folder_action, **kwargs)
        else:
            (data) = self.put_permissions_folders_id_with_http_info(id, workspace_id, group_id, verb, folder_action, **kwargs)
            return data

    def put_permissions_folders_id_with_http_info(self, id, workspace_id, group_id, verb, folder_action, **kwargs):
        """
        Update folder permissions
        Update folder permissions for a group. View = TRUE, this means that group members can return the folder/file and its viewer image. Download = TRUE, this means tha that group members can create download containing the folder. Upload = TRUE, this mean that group members can create an upload object with the folder as a parent.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_permissions_folders_id_with_http_info(id, workspace_id, group_id, verb, folder_action, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of folder (0 for root) (required)
        :param int workspace_id: ID of workspace (required)
        :param int group_id: ID of group (required)
        :param str verb: Grant or revoke permission for folder (required)
        :param str folder_action: Permission type for folder (required)
        :return: FolderUpdate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id', 'group_id', 'verb', 'folder_action']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_permissions_folders_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_permissions_folders_id`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_permissions_folders_id`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `put_permissions_folders_id`")
        # verify the required parameter 'verb' is set
        if ('verb' not in params) or (params['verb'] is None):
            raise ValueError("Missing the required parameter `verb` when calling `put_permissions_folders_id`")
        # verify the required parameter 'folder_action' is set
        if ('folder_action' not in params) or (params['folder_action'] is None):
            raise ValueError("Missing the required parameter `folder_action` when calling `put_permissions_folders_id`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'workspace_id' in params:
            form_params.append(('workspace_id', params['workspace_id']))
        if 'group_id' in params:
            form_params.append(('group_id', params['group_id']))
        if 'verb' in params:
            form_params.append(('verb', params['verb']))
        if 'folder_action' in params:
            form_params.append(('folder_action', params['folder_action']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/permissions/folders/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FolderUpdate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
