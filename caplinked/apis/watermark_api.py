# coding: utf-8

"""
    CapLinked API v1.0

    Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.

    OpenAPI spec version: 2017-05-23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class WatermarkApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_watermark_id(self, id, **kwargs):
        """
        Delete custom watermark
        Delete custom watermark
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_watermark_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the watermark setting to delete (required)
        :return: StatusMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_watermark_id_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_watermark_id_with_http_info(id, **kwargs)
            return data

    def delete_watermark_id_with_http_info(self, id, **kwargs):
        """
        Delete custom watermark
        Delete custom watermark
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_watermark_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the watermark setting to delete (required)
        :return: StatusMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_watermark_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_watermark_id`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/watermark/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StatusMessage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_watermark_id(self, id, **kwargs):
        """
        Get custom watermark setting
        Get custom watermark setting
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_watermark_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the watermark setting (required)
        :return: CustomWatermarkSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_watermark_id_with_http_info(id, **kwargs)
        else:
            (data) = self.get_watermark_id_with_http_info(id, **kwargs)
            return data

    def get_watermark_id_with_http_info(self, id, **kwargs):
        """
        Get custom watermark setting
        Get custom watermark setting
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_watermark_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the watermark setting (required)
        :return: CustomWatermarkSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_watermark_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_watermark_id`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/watermark/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomWatermarkSetting',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_watermark(self, team_id, custom_text, **kwargs):
        """
        Add custom watermark
        Add custom watermark
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_watermark(team_id, custom_text, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int team_id: ID of the team (required)
        :param str custom_text: Custom watermark text (required)
        :param str color: Hexadecimal color value (i.e. #eee, #e1e1e1)
        :param float opacity: Opacity 0 to 1.0
        :param int font_size: Font size in pixels
        :param int rotation: Rotation degrees (-90 to 90)
        :param str hposition: Horizontal position (left, center, right)
        :param str vposition: Vertical position (top, center, bottom)
        :param bool display_user_name: Display user name
        :param bool display_user_email: Display user email address
        :param bool display_ip_address: Display user IP address
        :param bool display_time: Display time
        :param bool display_workspace_name: Display workspace name
        :return: CustomWatermarkSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_watermark_with_http_info(team_id, custom_text, **kwargs)
        else:
            (data) = self.post_watermark_with_http_info(team_id, custom_text, **kwargs)
            return data

    def post_watermark_with_http_info(self, team_id, custom_text, **kwargs):
        """
        Add custom watermark
        Add custom watermark
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_watermark_with_http_info(team_id, custom_text, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int team_id: ID of the team (required)
        :param str custom_text: Custom watermark text (required)
        :param str color: Hexadecimal color value (i.e. #eee, #e1e1e1)
        :param float opacity: Opacity 0 to 1.0
        :param int font_size: Font size in pixels
        :param int rotation: Rotation degrees (-90 to 90)
        :param str hposition: Horizontal position (left, center, right)
        :param str vposition: Vertical position (top, center, bottom)
        :param bool display_user_name: Display user name
        :param bool display_user_email: Display user email address
        :param bool display_ip_address: Display user IP address
        :param bool display_time: Display time
        :param bool display_workspace_name: Display workspace name
        :return: CustomWatermarkSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'custom_text', 'color', 'opacity', 'font_size', 'rotation', 'hposition', 'vposition', 'display_user_name', 'display_user_email', 'display_ip_address', 'display_time', 'display_workspace_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_watermark" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `post_watermark`")
        # verify the required parameter 'custom_text' is set
        if ('custom_text' not in params) or (params['custom_text'] is None):
            raise ValueError("Missing the required parameter `custom_text` when calling `post_watermark`")

        if 'font_size' in params and params['font_size'] > 100:
            raise ValueError("Invalid value for parameter `font_size` when calling `post_watermark`, must be a value less than or equal to `100`")
        if 'font_size' in params and params['font_size'] < 2:
            raise ValueError("Invalid value for parameter `font_size` when calling `post_watermark`, must be a value greater than or equal to `2`")
        if 'rotation' in params and params['rotation'] > 90:
            raise ValueError("Invalid value for parameter `rotation` when calling `post_watermark`, must be a value less than or equal to `90`")
        if 'rotation' in params and params['rotation'] < -90:
            raise ValueError("Invalid value for parameter `rotation` when calling `post_watermark`, must be a value greater than or equal to `-90`")

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'team_id' in params:
            form_params.append(('team_id', params['team_id']))
        if 'custom_text' in params:
            form_params.append(('custom_text', params['custom_text']))
        if 'color' in params:
            form_params.append(('color', params['color']))
        if 'opacity' in params:
            form_params.append(('opacity', params['opacity']))
        if 'font_size' in params:
            form_params.append(('font_size', params['font_size']))
        if 'rotation' in params:
            form_params.append(('rotation', params['rotation']))
        if 'hposition' in params:
            form_params.append(('hposition', params['hposition']))
        if 'vposition' in params:
            form_params.append(('vposition', params['vposition']))
        if 'display_user_name' in params:
            form_params.append(('display_user_name', params['display_user_name']))
        if 'display_user_email' in params:
            form_params.append(('display_user_email', params['display_user_email']))
        if 'display_ip_address' in params:
            form_params.append(('display_ip_address', params['display_ip_address']))
        if 'display_time' in params:
            form_params.append(('display_time', params['display_time']))
        if 'display_workspace_name' in params:
            form_params.append(('display_workspace_name', params['display_workspace_name']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/watermark', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomWatermarkSetting',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_watermark_id(self, id, **kwargs):
        """
        Update custom watermark
        Update custom watermark
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_watermark_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the watermark setting to update (required)
        :param str custom_text: Custom watermark text
        :param str color: Hexadecimal color value (i.e. #eee, #e1e1e1)
        :param float opacity: Opacity 0 to 1.0
        :param int font_size: Font size in pixels
        :param int rotation: Rotation degrees (-90 to 90)
        :param str hposition: Horizontal position (left, center, right)
        :param str vposition: Vertical position (top, center, bottom)
        :param bool display_user_name: Display user name
        :param bool display_user_email: Display user email address
        :param bool display_ip_address: Display user IP address
        :param bool display_time: Display time
        :param bool display_workspace_name: Display workspace name
        :return: CustomWatermarkSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_watermark_id_with_http_info(id, **kwargs)
        else:
            (data) = self.put_watermark_id_with_http_info(id, **kwargs)
            return data

    def put_watermark_id_with_http_info(self, id, **kwargs):
        """
        Update custom watermark
        Update custom watermark
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_watermark_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the watermark setting to update (required)
        :param str custom_text: Custom watermark text
        :param str color: Hexadecimal color value (i.e. #eee, #e1e1e1)
        :param float opacity: Opacity 0 to 1.0
        :param int font_size: Font size in pixels
        :param int rotation: Rotation degrees (-90 to 90)
        :param str hposition: Horizontal position (left, center, right)
        :param str vposition: Vertical position (top, center, bottom)
        :param bool display_user_name: Display user name
        :param bool display_user_email: Display user email address
        :param bool display_ip_address: Display user IP address
        :param bool display_time: Display time
        :param bool display_workspace_name: Display workspace name
        :return: CustomWatermarkSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'custom_text', 'color', 'opacity', 'font_size', 'rotation', 'hposition', 'vposition', 'display_user_name', 'display_user_email', 'display_ip_address', 'display_time', 'display_workspace_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_watermark_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_watermark_id`")

        if 'font_size' in params and params['font_size'] > 100:
            raise ValueError("Invalid value for parameter `font_size` when calling `put_watermark_id`, must be a value less than or equal to `100`")
        if 'font_size' in params and params['font_size'] < 2:
            raise ValueError("Invalid value for parameter `font_size` when calling `put_watermark_id`, must be a value greater than or equal to `2`")
        if 'rotation' in params and params['rotation'] > 90:
            raise ValueError("Invalid value for parameter `rotation` when calling `put_watermark_id`, must be a value less than or equal to `90`")
        if 'rotation' in params and params['rotation'] < -90:
            raise ValueError("Invalid value for parameter `rotation` when calling `put_watermark_id`, must be a value greater than or equal to `-90`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'custom_text' in params:
            form_params.append(('custom_text', params['custom_text']))
        if 'color' in params:
            form_params.append(('color', params['color']))
        if 'opacity' in params:
            form_params.append(('opacity', params['opacity']))
        if 'font_size' in params:
            form_params.append(('font_size', params['font_size']))
        if 'rotation' in params:
            form_params.append(('rotation', params['rotation']))
        if 'hposition' in params:
            form_params.append(('hposition', params['hposition']))
        if 'vposition' in params:
            form_params.append(('vposition', params['vposition']))
        if 'display_user_name' in params:
            form_params.append(('display_user_name', params['display_user_name']))
        if 'display_user_email' in params:
            form_params.append(('display_user_email', params['display_user_email']))
        if 'display_ip_address' in params:
            form_params.append(('display_ip_address', params['display_ip_address']))
        if 'display_time' in params:
            form_params.append(('display_time', params['display_time']))
        if 'display_workspace_name' in params:
            form_params.append(('display_workspace_name', params['display_workspace_name']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/watermark/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomWatermarkSetting',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
