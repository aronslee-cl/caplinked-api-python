# coding: utf-8

"""
    CapLinked API v1.0

    Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.

    OpenAPI spec version: 2017-05-23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GroupsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_groups_id(self, id, workspace_id, **kwargs):
        """
        Delete group
        Delete group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_groups_id(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :return: GroupInfoDeleted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_groups_id_with_http_info(id, workspace_id, **kwargs)
        else:
            (data) = self.delete_groups_id_with_http_info(id, workspace_id, **kwargs)
            return data

    def delete_groups_id_with_http_info(self, id, workspace_id, **kwargs):
        """
        Delete group
        Delete group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_groups_id_with_http_info(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :return: GroupInfoDeleted
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_groups_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_groups_id`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_groups_id`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'workspace_id' in params:
            query_params.append(('workspace_id', params['workspace_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupInfoDeleted',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_groups_id_memberships(self, id, workspace_id, user_id, **kwargs):
        """
        Remove a user from a group
        Remove a user from a group. Members of the Workspace Admin group may only be removed by other Workspace Admins. If Workspace Admin is Team Member, they may only be removed by another Team Member.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_groups_id_memberships(id, workspace_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the group you wish the user to be removed from (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param int user_id: ID of the user to be removed from this group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_groups_id_memberships_with_http_info(id, workspace_id, user_id, **kwargs)
        else:
            (data) = self.delete_groups_id_memberships_with_http_info(id, workspace_id, user_id, **kwargs)
            return data

    def delete_groups_id_memberships_with_http_info(self, id, workspace_id, user_id, **kwargs):
        """
        Remove a user from a group
        Remove a user from a group. Members of the Workspace Admin group may only be removed by other Workspace Admins. If Workspace Admin is Team Member, they may only be removed by another Team Member.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_groups_id_memberships_with_http_info(id, workspace_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the group you wish the user to be removed from (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param int user_id: ID of the user to be removed from this group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_groups_id_memberships" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_groups_id_memberships`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_groups_id_memberships`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_groups_id_memberships`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'workspace_id' in params:
            query_params.append(('workspace_id', params['workspace_id']))
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}/memberships', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_groups(self, workspace_id, **kwargs):
        """
        List all groups in workspace
        List all groups in workspace
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups(workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int workspace_id: ID of workspace from which to list groups (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_groups_with_http_info(workspace_id, **kwargs)
        else:
            (data) = self.get_groups_with_http_info(workspace_id, **kwargs)
            return data

    def get_groups_with_http_info(self, workspace_id, **kwargs):
        """
        List all groups in workspace
        List all groups in workspace
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups_with_http_info(workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int workspace_id: ID of workspace from which to list groups (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_groups`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'workspace_id' in params:
            query_params.append(('workspace_id', params['workspace_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_groups_id(self, id, workspace_id, **kwargs):
        """
        Get group information
        Get group information
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups_id(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group (required)
        :param int workspace_id: Workspace ID for the group (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_groups_id_with_http_info(id, workspace_id, **kwargs)
        else:
            (data) = self.get_groups_id_with_http_info(id, workspace_id, **kwargs)
            return data

    def get_groups_id_with_http_info(self, id, workspace_id, **kwargs):
        """
        Get group information
        Get group information
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups_id_with_http_info(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group (required)
        :param int workspace_id: Workspace ID for the group (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_groups_id`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_groups_id`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'workspace_id' in params:
            query_params.append(('workspace_id', params['workspace_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_groups_id_memberships(self, id, workspace_id, **kwargs):
        """
        List all memberships for a group
        List all memberships for a group. Note that Workspace Admins are in two groups: Workspace Admins and Team Admins. The latter contains workspace admins that are also Team Members of the workspace parent team.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups_id_memberships(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the group you want to list the members of (required)
        :param int workspace_id: Workspace ID for the group (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_groups_id_memberships_with_http_info(id, workspace_id, **kwargs)
        else:
            (data) = self.get_groups_id_memberships_with_http_info(id, workspace_id, **kwargs)
            return data

    def get_groups_id_memberships_with_http_info(self, id, workspace_id, **kwargs):
        """
        List all memberships for a group
        List all memberships for a group. Note that Workspace Admins are in two groups: Workspace Admins and Team Admins. The latter contains workspace admins that are also Team Members of the workspace parent team.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups_id_memberships_with_http_info(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the group you want to list the members of (required)
        :param int workspace_id: Workspace ID for the group (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups_id_memberships" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_groups_id_memberships`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_groups_id_memberships`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'workspace_id' in params:
            query_params.append(('workspace_id', params['workspace_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}/memberships', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_groups(self, group_name, group_workspace_id, **kwargs):
        """
        Create group
        Create group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_groups(group_name, group_workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_name: Name of group (required)
        :param int group_workspace_id: Workspace ID for the group (required)
        :param bool group_file_managing_abilities: Enable file managing abililies for uploading users
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_groups_with_http_info(group_name, group_workspace_id, **kwargs)
        else:
            (data) = self.post_groups_with_http_info(group_name, group_workspace_id, **kwargs)
            return data

    def post_groups_with_http_info(self, group_name, group_workspace_id, **kwargs):
        """
        Create group
        Create group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_groups_with_http_info(group_name, group_workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_name: Name of group (required)
        :param int group_workspace_id: Workspace ID for the group (required)
        :param bool group_file_managing_abilities: Enable file managing abililies for uploading users
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_name', 'group_workspace_id', 'group_file_managing_abilities']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_name' is set
        if ('group_name' not in params) or (params['group_name'] is None):
            raise ValueError("Missing the required parameter `group_name` when calling `post_groups`")
        # verify the required parameter 'group_workspace_id' is set
        if ('group_workspace_id' not in params) or (params['group_workspace_id'] is None):
            raise ValueError("Missing the required parameter `group_workspace_id` when calling `post_groups`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'group_name' in params:
            form_params.append(('group[name]', params['group_name']))
        if 'group_workspace_id' in params:
            form_params.append(('group[workspace_id]', params['group_workspace_id']))
        if 'group_file_managing_abilities' in params:
            form_params.append(('group[file_managing_abilities]', params['group_file_managing_abilities']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_groups_id_memberships(self, id, workspace_id, user_id, **kwargs):
        """
        Add user to group (adds to parent workspace if they are not already a member)
        Add user to group (adds to parent workspace if they are not already a member)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_groups_id_memberships(id, workspace_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the group you wish the user to be added to (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param int user_id: ID of the user to be added to this group (required)
        :param bool send_email: Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_groups_id_memberships_with_http_info(id, workspace_id, user_id, **kwargs)
        else:
            (data) = self.post_groups_id_memberships_with_http_info(id, workspace_id, user_id, **kwargs)
            return data

    def post_groups_id_memberships_with_http_info(self, id, workspace_id, user_id, **kwargs):
        """
        Add user to group (adds to parent workspace if they are not already a member)
        Add user to group (adds to parent workspace if they are not already a member)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_groups_id_memberships_with_http_info(id, workspace_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of the group you wish the user to be added to (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param int user_id: ID of the user to be added to this group (required)
        :param bool send_email: Send workspace invitation email to this user.  Defaults to true, use false if you do not want the email to be sent
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id', 'user_id', 'send_email']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_groups_id_memberships" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_groups_id_memberships`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `post_groups_id_memberships`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `post_groups_id_memberships`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'workspace_id' in params:
            form_params.append(('workspace_id', params['workspace_id']))
        if 'user_id' in params:
            form_params.append(('user_id', params['user_id']))
        if 'send_email' in params:
            form_params.append(('send_email', params['send_email']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}/memberships', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_groups_id(self, id, workspace_id, **kwargs):
        """
        Update group
        Update group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param str group_name: Name of group
        :param bool group_file_managing_abilities: Ability to delete, rename, and reindex files for uploading users
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_groups_id_with_http_info(id, workspace_id, **kwargs)
        else:
            (data) = self.put_groups_id_with_http_info(id, workspace_id, **kwargs)
            return data

    def put_groups_id_with_http_info(self, id, workspace_id, **kwargs):
        """
        Update group
        Update group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_with_http_info(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param str group_name: Name of group
        :param bool group_file_managing_abilities: Ability to delete, rename, and reindex files for uploading users
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id', 'group_name', 'group_file_managing_abilities']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_groups_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_groups_id`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_groups_id`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'workspace_id' in params:
            form_params.append(('workspace_id', params['workspace_id']))
        if 'group_name' in params:
            form_params.append(('group[name]', params['group_name']))
        if 'group_file_managing_abilities' in params:
            form_params.append(('group[file_managing_abilities]', params['group_file_managing_abilities']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_groups_id_disable_drm_expiration(self, id, workspace_id, **kwargs):
        """
        Disable DRM expiration for group
        Disable DRM expiration for group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_disable_drm_expiration(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_groups_id_disable_drm_expiration_with_http_info(id, workspace_id, **kwargs)
        else:
            (data) = self.put_groups_id_disable_drm_expiration_with_http_info(id, workspace_id, **kwargs)
            return data

    def put_groups_id_disable_drm_expiration_with_http_info(self, id, workspace_id, **kwargs):
        """
        Disable DRM expiration for group
        Disable DRM expiration for group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_disable_drm_expiration_with_http_info(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_groups_id_disable_drm_expiration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_groups_id_disable_drm_expiration`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_groups_id_disable_drm_expiration`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'workspace_id' in params:
            form_params.append(('workspace_id', params['workspace_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}/disable_drm_expiration', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_groups_id_disable_expire_access(self, id, workspace_id, **kwargs):
        """
        Disable access expiration for a group
        Disable access expiration for a group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_disable_expire_access(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_groups_id_disable_expire_access_with_http_info(id, workspace_id, **kwargs)
        else:
            (data) = self.put_groups_id_disable_expire_access_with_http_info(id, workspace_id, **kwargs)
            return data

    def put_groups_id_disable_expire_access_with_http_info(self, id, workspace_id, **kwargs):
        """
        Disable access expiration for a group
        Disable access expiration for a group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_disable_expire_access_with_http_info(id, workspace_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_groups_id_disable_expire_access" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_groups_id_disable_expire_access`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_groups_id_disable_expire_access`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'workspace_id' in params:
            form_params.append(('workspace_id', params['workspace_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}/disable_expire_access', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_groups_id_drm(self, id, workspace_id, group_drm_enabled, **kwargs):
        """
        Update DRM for group
        Update DRM for group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_drm(id, workspace_id, group_drm_enabled, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param str group_drm_enabled: Enable DRM for group (required)
        :param date group_drm_expires_after: Expire DRM after this date. Format: yyyy-mm-dd
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_groups_id_drm_with_http_info(id, workspace_id, group_drm_enabled, **kwargs)
        else:
            (data) = self.put_groups_id_drm_with_http_info(id, workspace_id, group_drm_enabled, **kwargs)
            return data

    def put_groups_id_drm_with_http_info(self, id, workspace_id, group_drm_enabled, **kwargs):
        """
        Update DRM for group
        Update DRM for group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_drm_with_http_info(id, workspace_id, group_drm_enabled, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param str group_drm_enabled: Enable DRM for group (required)
        :param date group_drm_expires_after: Expire DRM after this date. Format: yyyy-mm-dd
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id', 'group_drm_enabled', 'group_drm_expires_after']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_groups_id_drm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_groups_id_drm`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_groups_id_drm`")
        # verify the required parameter 'group_drm_enabled' is set
        if ('group_drm_enabled' not in params) or (params['group_drm_enabled'] is None):
            raise ValueError("Missing the required parameter `group_drm_enabled` when calling `put_groups_id_drm`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'workspace_id' in params:
            form_params.append(('workspace_id', params['workspace_id']))
        if 'group_drm_enabled' in params:
            form_params.append(('group[drm_enabled]', params['group_drm_enabled']))
        if 'group_drm_expires_after' in params:
            form_params.append(('group[drm_expires_after]', params['group_drm_expires_after']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}/drm', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_groups_id_enable_expire_access(self, id, workspace_id, group_expire_workspace_access_at, **kwargs):
        """
        Enable access expiration for a group
        Enable access expiration for a group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_enable_expire_access(id, workspace_id, group_expire_workspace_access_at, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param date group_expire_workspace_access_at: Expire access on the following date. Format: yyyy-mm-dd (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_groups_id_enable_expire_access_with_http_info(id, workspace_id, group_expire_workspace_access_at, **kwargs)
        else:
            (data) = self.put_groups_id_enable_expire_access_with_http_info(id, workspace_id, group_expire_workspace_access_at, **kwargs)
            return data

    def put_groups_id_enable_expire_access_with_http_info(self, id, workspace_id, group_expire_workspace_access_at, **kwargs):
        """
        Enable access expiration for a group
        Enable access expiration for a group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_enable_expire_access_with_http_info(id, workspace_id, group_expire_workspace_access_at, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param date group_expire_workspace_access_at: Expire access on the following date. Format: yyyy-mm-dd (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id', 'group_expire_workspace_access_at']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_groups_id_enable_expire_access" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_groups_id_enable_expire_access`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_groups_id_enable_expire_access`")
        # verify the required parameter 'group_expire_workspace_access_at' is set
        if ('group_expire_workspace_access_at' not in params) or (params['group_expire_workspace_access_at'] is None):
            raise ValueError("Missing the required parameter `group_expire_workspace_access_at` when calling `put_groups_id_enable_expire_access`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'workspace_id' in params:
            form_params.append(('workspace_id', params['workspace_id']))
        if 'group_expire_workspace_access_at' in params:
            form_params.append(('group[expire_workspace_access_at]', params['group_expire_workspace_access_at']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}/enable_expire_access', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_groups_id_watermarking(self, id, workspace_id, group_watermarking, **kwargs):
        """
        Watermarking for group
        Watermarking for group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_watermarking(id, workspace_id, group_watermarking, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param bool group_watermarking: Enable watermarking for group (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_groups_id_watermarking_with_http_info(id, workspace_id, group_watermarking, **kwargs)
        else:
            (data) = self.put_groups_id_watermarking_with_http_info(id, workspace_id, group_watermarking, **kwargs)
            return data

    def put_groups_id_watermarking_with_http_info(self, id, workspace_id, group_watermarking, **kwargs):
        """
        Watermarking for group
        Watermarking for group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_groups_id_watermarking_with_http_info(id, workspace_id, group_watermarking, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID of group to update (required)
        :param int workspace_id: Workspace ID for the group (required)
        :param bool group_watermarking: Enable watermarking for group (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workspace_id', 'group_watermarking']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_groups_id_watermarking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_groups_id_watermarking`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_groups_id_watermarking`")
        # verify the required parameter 'group_watermarking' is set
        if ('group_watermarking' not in params) or (params['group_watermarking'] is None):
            raise ValueError("Missing the required parameter `group_watermarking` when calling `put_groups_id_watermarking`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'workspace_id' in params:
            form_params.append(('workspace_id', params['workspace_id']))
        if 'group_watermarking' in params:
            form_params.append(('group[watermarking]', params['group_watermarking']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{id}/watermarking', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
