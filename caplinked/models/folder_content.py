# coding: utf-8

"""
    CapLinked API v1.0

    Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.

    OpenAPI spec version: 2017-05-23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FolderContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folder': 'FolderMeta',
        'immediate_subfolders': 'FolderMeta',
        'immediate_subfiles': 'FileInfoCompact'
    }

    attribute_map = {
        'folder': 'folder',
        'immediate_subfolders': 'immediate_subfolders',
        'immediate_subfiles': 'immediate_subfiles'
    }

    def __init__(self, folder=None, immediate_subfolders=None, immediate_subfiles=None):
        """
        FolderContent - a model defined in Swagger
        """

        self._folder = None
        self._immediate_subfolders = None
        self._immediate_subfiles = None

        if folder is not None:
          self.folder = folder
        if immediate_subfolders is not None:
          self.immediate_subfolders = immediate_subfolders
        if immediate_subfiles is not None:
          self.immediate_subfiles = immediate_subfiles

    @property
    def folder(self):
        """
        Gets the folder of this FolderContent.

        :return: The folder of this FolderContent.
        :rtype: FolderMeta
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """
        Sets the folder of this FolderContent.

        :param folder: The folder of this FolderContent.
        :type: FolderMeta
        """

        self._folder = folder

    @property
    def immediate_subfolders(self):
        """
        Gets the immediate_subfolders of this FolderContent.

        :return: The immediate_subfolders of this FolderContent.
        :rtype: FolderMeta
        """
        return self._immediate_subfolders

    @immediate_subfolders.setter
    def immediate_subfolders(self, immediate_subfolders):
        """
        Sets the immediate_subfolders of this FolderContent.

        :param immediate_subfolders: The immediate_subfolders of this FolderContent.
        :type: FolderMeta
        """

        self._immediate_subfolders = immediate_subfolders

    @property
    def immediate_subfiles(self):
        """
        Gets the immediate_subfiles of this FolderContent.

        :return: The immediate_subfiles of this FolderContent.
        :rtype: FileInfoCompact
        """
        return self._immediate_subfiles

    @immediate_subfiles.setter
    def immediate_subfiles(self, immediate_subfiles):
        """
        Sets the immediate_subfiles of this FolderContent.

        :param immediate_subfiles: The immediate_subfiles of this FolderContent.
        :type: FileInfoCompact
        """

        self._immediate_subfiles = immediate_subfiles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FolderContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
