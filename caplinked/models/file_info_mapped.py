# coding: utf-8

"""
    CapLinked API v1.0

    Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.

    OpenAPI spec version: 2017-05-23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FileInfoMapped(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'file_name': 'str',
        'file_content_type': 'str',
        'file_size': 'str',
        'index': 'int',
        'folder_id': 'int',
        'pages': 'int',
        'version': 'int',
        'infected': 'bool',
        'viewer_image': 'FileViewerImage',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'file_name': 'file_name',
        'file_content_type': 'file_content_type',
        'file_size': 'file_size',
        'index': 'index',
        'folder_id': 'folder_id',
        'pages': 'pages',
        'version': 'version',
        'infected': 'infected',
        'viewer_image': 'viewer_image',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, title=None, file_name=None, file_content_type=None, file_size=None, index=None, folder_id=None, pages=None, version=None, infected=None, viewer_image=None, created_at=None, updated_at=None):
        """
        FileInfoMapped - a model defined in Swagger
        """

        self._id = None
        self._title = None
        self._file_name = None
        self._file_content_type = None
        self._file_size = None
        self._index = None
        self._folder_id = None
        self._pages = None
        self._version = None
        self._infected = None
        self._viewer_image = None
        self._created_at = None
        self._updated_at = None

        if id is not None:
          self.id = id
        if title is not None:
          self.title = title
        if file_name is not None:
          self.file_name = file_name
        if file_content_type is not None:
          self.file_content_type = file_content_type
        if file_size is not None:
          self.file_size = file_size
        if index is not None:
          self.index = index
        if folder_id is not None:
          self.folder_id = folder_id
        if pages is not None:
          self.pages = pages
        if version is not None:
          self.version = version
        if infected is not None:
          self.infected = infected
        if viewer_image is not None:
          self.viewer_image = viewer_image
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def id(self):
        """
        Gets the id of this FileInfoMapped.

        :return: The id of this FileInfoMapped.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FileInfoMapped.

        :param id: The id of this FileInfoMapped.
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this FileInfoMapped.

        :return: The title of this FileInfoMapped.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this FileInfoMapped.

        :param title: The title of this FileInfoMapped.
        :type: str
        """

        self._title = title

    @property
    def file_name(self):
        """
        Gets the file_name of this FileInfoMapped.

        :return: The file_name of this FileInfoMapped.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this FileInfoMapped.

        :param file_name: The file_name of this FileInfoMapped.
        :type: str
        """

        self._file_name = file_name

    @property
    def file_content_type(self):
        """
        Gets the file_content_type of this FileInfoMapped.

        :return: The file_content_type of this FileInfoMapped.
        :rtype: str
        """
        return self._file_content_type

    @file_content_type.setter
    def file_content_type(self, file_content_type):
        """
        Sets the file_content_type of this FileInfoMapped.

        :param file_content_type: The file_content_type of this FileInfoMapped.
        :type: str
        """

        self._file_content_type = file_content_type

    @property
    def file_size(self):
        """
        Gets the file_size of this FileInfoMapped.

        :return: The file_size of this FileInfoMapped.
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """
        Sets the file_size of this FileInfoMapped.

        :param file_size: The file_size of this FileInfoMapped.
        :type: str
        """

        self._file_size = file_size

    @property
    def index(self):
        """
        Gets the index of this FileInfoMapped.

        :return: The index of this FileInfoMapped.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """
        Sets the index of this FileInfoMapped.

        :param index: The index of this FileInfoMapped.
        :type: int
        """

        self._index = index

    @property
    def folder_id(self):
        """
        Gets the folder_id of this FileInfoMapped.

        :return: The folder_id of this FileInfoMapped.
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """
        Sets the folder_id of this FileInfoMapped.

        :param folder_id: The folder_id of this FileInfoMapped.
        :type: int
        """

        self._folder_id = folder_id

    @property
    def pages(self):
        """
        Gets the pages of this FileInfoMapped.

        :return: The pages of this FileInfoMapped.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """
        Sets the pages of this FileInfoMapped.

        :param pages: The pages of this FileInfoMapped.
        :type: int
        """

        self._pages = pages

    @property
    def version(self):
        """
        Gets the version of this FileInfoMapped.

        :return: The version of this FileInfoMapped.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this FileInfoMapped.

        :param version: The version of this FileInfoMapped.
        :type: int
        """

        self._version = version

    @property
    def infected(self):
        """
        Gets the infected of this FileInfoMapped.

        :return: The infected of this FileInfoMapped.
        :rtype: bool
        """
        return self._infected

    @infected.setter
    def infected(self, infected):
        """
        Sets the infected of this FileInfoMapped.

        :param infected: The infected of this FileInfoMapped.
        :type: bool
        """

        self._infected = infected

    @property
    def viewer_image(self):
        """
        Gets the viewer_image of this FileInfoMapped.

        :return: The viewer_image of this FileInfoMapped.
        :rtype: FileViewerImage
        """
        return self._viewer_image

    @viewer_image.setter
    def viewer_image(self, viewer_image):
        """
        Sets the viewer_image of this FileInfoMapped.

        :param viewer_image: The viewer_image of this FileInfoMapped.
        :type: FileViewerImage
        """

        self._viewer_image = viewer_image

    @property
    def created_at(self):
        """
        Gets the created_at of this FileInfoMapped.

        :return: The created_at of this FileInfoMapped.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this FileInfoMapped.

        :param created_at: The created_at of this FileInfoMapped.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this FileInfoMapped.

        :return: The updated_at of this FileInfoMapped.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this FileInfoMapped.

        :param updated_at: The updated_at of this FileInfoMapped.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FileInfoMapped):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
