# coding: utf-8

"""
    CapLinked API v1.0

    Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.

    OpenAPI spec version: 2017-05-23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Activity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'int',
        'user_name': 'str',
        'workspace_id': 'int',
        'verb': 'str',
        'message': 'str',
        'subject_type': 'str',
        'subject_id': 'int',
        'created_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'user_name': 'user_name',
        'workspace_id': 'workspace_id',
        'verb': 'verb',
        'message': 'message',
        'subject_type': 'subject_type',
        'subject_id': 'subject_id',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, user_id=None, user_name=None, workspace_id=None, verb=None, message=None, subject_type=None, subject_id=None, created_at=None):
        """
        Activity - a model defined in Swagger
        """

        self._id = None
        self._user_id = None
        self._user_name = None
        self._workspace_id = None
        self._verb = None
        self._message = None
        self._subject_type = None
        self._subject_id = None
        self._created_at = None

        if id is not None:
          self.id = id
        if user_id is not None:
          self.user_id = user_id
        if user_name is not None:
          self.user_name = user_name
        if workspace_id is not None:
          self.workspace_id = workspace_id
        if verb is not None:
          self.verb = verb
        if message is not None:
          self.message = message
        if subject_type is not None:
          self.subject_type = subject_type
        if subject_id is not None:
          self.subject_id = subject_id
        if created_at is not None:
          self.created_at = created_at

    @property
    def id(self):
        """
        Gets the id of this Activity.

        :return: The id of this Activity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Activity.

        :param id: The id of this Activity.
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """
        Gets the user_id of this Activity.

        :return: The user_id of this Activity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Activity.

        :param user_id: The user_id of this Activity.
        :type: int
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """
        Gets the user_name of this Activity.

        :return: The user_name of this Activity.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this Activity.

        :param user_name: The user_name of this Activity.
        :type: str
        """

        self._user_name = user_name

    @property
    def workspace_id(self):
        """
        Gets the workspace_id of this Activity.

        :return: The workspace_id of this Activity.
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """
        Sets the workspace_id of this Activity.

        :param workspace_id: The workspace_id of this Activity.
        :type: int
        """

        self._workspace_id = workspace_id

    @property
    def verb(self):
        """
        Gets the verb of this Activity.

        :return: The verb of this Activity.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """
        Sets the verb of this Activity.

        :param verb: The verb of this Activity.
        :type: str
        """

        self._verb = verb

    @property
    def message(self):
        """
        Gets the message of this Activity.

        :return: The message of this Activity.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Activity.

        :param message: The message of this Activity.
        :type: str
        """

        self._message = message

    @property
    def subject_type(self):
        """
        Gets the subject_type of this Activity.

        :return: The subject_type of this Activity.
        :rtype: str
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """
        Sets the subject_type of this Activity.

        :param subject_type: The subject_type of this Activity.
        :type: str
        """

        self._subject_type = subject_type

    @property
    def subject_id(self):
        """
        Gets the subject_id of this Activity.

        :return: The subject_id of this Activity.
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """
        Sets the subject_id of this Activity.

        :param subject_id: The subject_id of this Activity.
        :type: int
        """

        self._subject_id = subject_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Activity.

        :return: The created_at of this Activity.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Activity.

        :param created_at: The created_at of this Activity.
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Activity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
