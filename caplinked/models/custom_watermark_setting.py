# coding: utf-8

"""
    CapLinked API v1.0

    Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.

    OpenAPI spec version: 2017-05-23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomWatermarkSetting(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'watermark_id': 'int',
        'team_id': 'int',
        'custom_text': 'str',
        'color': 'str',
        'opacity': 'float',
        'font_size': 'int',
        'rotation': 'int',
        'hposition': 'str',
        'vposition': 'str',
        'display_user_name': 'bool',
        'display_user_email': 'bool',
        'display_ip_address': 'bool',
        'display_time': 'bool',
        'display_workspace_name': 'bool'
    }

    attribute_map = {
        'watermark_id': 'watermark_id',
        'team_id': 'team_id',
        'custom_text': 'custom_text',
        'color': 'color',
        'opacity': 'opacity',
        'font_size': 'font_size',
        'rotation': 'rotation',
        'hposition': 'hposition',
        'vposition': 'vposition',
        'display_user_name': 'display_user_name',
        'display_user_email': 'display_user_email',
        'display_ip_address': 'display_ip_address',
        'display_time': 'display_time',
        'display_workspace_name': 'display_workspace_name'
    }

    def __init__(self, watermark_id=None, team_id=None, custom_text=None, color=None, opacity=None, font_size=None, rotation=None, hposition=None, vposition=None, display_user_name=None, display_user_email=None, display_ip_address=None, display_time=None, display_workspace_name=None):
        """
        CustomWatermarkSetting - a model defined in Swagger
        """

        self._watermark_id = None
        self._team_id = None
        self._custom_text = None
        self._color = None
        self._opacity = None
        self._font_size = None
        self._rotation = None
        self._hposition = None
        self._vposition = None
        self._display_user_name = None
        self._display_user_email = None
        self._display_ip_address = None
        self._display_time = None
        self._display_workspace_name = None

        if watermark_id is not None:
          self.watermark_id = watermark_id
        if team_id is not None:
          self.team_id = team_id
        if custom_text is not None:
          self.custom_text = custom_text
        if color is not None:
          self.color = color
        if opacity is not None:
          self.opacity = opacity
        if font_size is not None:
          self.font_size = font_size
        if rotation is not None:
          self.rotation = rotation
        if hposition is not None:
          self.hposition = hposition
        if vposition is not None:
          self.vposition = vposition
        if display_user_name is not None:
          self.display_user_name = display_user_name
        if display_user_email is not None:
          self.display_user_email = display_user_email
        if display_ip_address is not None:
          self.display_ip_address = display_ip_address
        if display_time is not None:
          self.display_time = display_time
        if display_workspace_name is not None:
          self.display_workspace_name = display_workspace_name

    @property
    def watermark_id(self):
        """
        Gets the watermark_id of this CustomWatermarkSetting.

        :return: The watermark_id of this CustomWatermarkSetting.
        :rtype: int
        """
        return self._watermark_id

    @watermark_id.setter
    def watermark_id(self, watermark_id):
        """
        Sets the watermark_id of this CustomWatermarkSetting.

        :param watermark_id: The watermark_id of this CustomWatermarkSetting.
        :type: int
        """

        self._watermark_id = watermark_id

    @property
    def team_id(self):
        """
        Gets the team_id of this CustomWatermarkSetting.

        :return: The team_id of this CustomWatermarkSetting.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """
        Sets the team_id of this CustomWatermarkSetting.

        :param team_id: The team_id of this CustomWatermarkSetting.
        :type: int
        """

        self._team_id = team_id

    @property
    def custom_text(self):
        """
        Gets the custom_text of this CustomWatermarkSetting.

        :return: The custom_text of this CustomWatermarkSetting.
        :rtype: str
        """
        return self._custom_text

    @custom_text.setter
    def custom_text(self, custom_text):
        """
        Sets the custom_text of this CustomWatermarkSetting.

        :param custom_text: The custom_text of this CustomWatermarkSetting.
        :type: str
        """

        self._custom_text = custom_text

    @property
    def color(self):
        """
        Gets the color of this CustomWatermarkSetting.

        :return: The color of this CustomWatermarkSetting.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this CustomWatermarkSetting.

        :param color: The color of this CustomWatermarkSetting.
        :type: str
        """

        self._color = color

    @property
    def opacity(self):
        """
        Gets the opacity of this CustomWatermarkSetting.

        :return: The opacity of this CustomWatermarkSetting.
        :rtype: float
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """
        Sets the opacity of this CustomWatermarkSetting.

        :param opacity: The opacity of this CustomWatermarkSetting.
        :type: float
        """

        self._opacity = opacity

    @property
    def font_size(self):
        """
        Gets the font_size of this CustomWatermarkSetting.

        :return: The font_size of this CustomWatermarkSetting.
        :rtype: int
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """
        Sets the font_size of this CustomWatermarkSetting.

        :param font_size: The font_size of this CustomWatermarkSetting.
        :type: int
        """

        self._font_size = font_size

    @property
    def rotation(self):
        """
        Gets the rotation of this CustomWatermarkSetting.

        :return: The rotation of this CustomWatermarkSetting.
        :rtype: int
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """
        Sets the rotation of this CustomWatermarkSetting.

        :param rotation: The rotation of this CustomWatermarkSetting.
        :type: int
        """

        self._rotation = rotation

    @property
    def hposition(self):
        """
        Gets the hposition of this CustomWatermarkSetting.

        :return: The hposition of this CustomWatermarkSetting.
        :rtype: str
        """
        return self._hposition

    @hposition.setter
    def hposition(self, hposition):
        """
        Sets the hposition of this CustomWatermarkSetting.

        :param hposition: The hposition of this CustomWatermarkSetting.
        :type: str
        """

        self._hposition = hposition

    @property
    def vposition(self):
        """
        Gets the vposition of this CustomWatermarkSetting.

        :return: The vposition of this CustomWatermarkSetting.
        :rtype: str
        """
        return self._vposition

    @vposition.setter
    def vposition(self, vposition):
        """
        Sets the vposition of this CustomWatermarkSetting.

        :param vposition: The vposition of this CustomWatermarkSetting.
        :type: str
        """

        self._vposition = vposition

    @property
    def display_user_name(self):
        """
        Gets the display_user_name of this CustomWatermarkSetting.

        :return: The display_user_name of this CustomWatermarkSetting.
        :rtype: bool
        """
        return self._display_user_name

    @display_user_name.setter
    def display_user_name(self, display_user_name):
        """
        Sets the display_user_name of this CustomWatermarkSetting.

        :param display_user_name: The display_user_name of this CustomWatermarkSetting.
        :type: bool
        """

        self._display_user_name = display_user_name

    @property
    def display_user_email(self):
        """
        Gets the display_user_email of this CustomWatermarkSetting.

        :return: The display_user_email of this CustomWatermarkSetting.
        :rtype: bool
        """
        return self._display_user_email

    @display_user_email.setter
    def display_user_email(self, display_user_email):
        """
        Sets the display_user_email of this CustomWatermarkSetting.

        :param display_user_email: The display_user_email of this CustomWatermarkSetting.
        :type: bool
        """

        self._display_user_email = display_user_email

    @property
    def display_ip_address(self):
        """
        Gets the display_ip_address of this CustomWatermarkSetting.

        :return: The display_ip_address of this CustomWatermarkSetting.
        :rtype: bool
        """
        return self._display_ip_address

    @display_ip_address.setter
    def display_ip_address(self, display_ip_address):
        """
        Sets the display_ip_address of this CustomWatermarkSetting.

        :param display_ip_address: The display_ip_address of this CustomWatermarkSetting.
        :type: bool
        """

        self._display_ip_address = display_ip_address

    @property
    def display_time(self):
        """
        Gets the display_time of this CustomWatermarkSetting.

        :return: The display_time of this CustomWatermarkSetting.
        :rtype: bool
        """
        return self._display_time

    @display_time.setter
    def display_time(self, display_time):
        """
        Sets the display_time of this CustomWatermarkSetting.

        :param display_time: The display_time of this CustomWatermarkSetting.
        :type: bool
        """

        self._display_time = display_time

    @property
    def display_workspace_name(self):
        """
        Gets the display_workspace_name of this CustomWatermarkSetting.

        :return: The display_workspace_name of this CustomWatermarkSetting.
        :rtype: bool
        """
        return self._display_workspace_name

    @display_workspace_name.setter
    def display_workspace_name(self, display_workspace_name):
        """
        Sets the display_workspace_name of this CustomWatermarkSetting.

        :param display_workspace_name: The display_workspace_name of this CustomWatermarkSetting.
        :type: bool
        """

        self._display_workspace_name = display_workspace_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomWatermarkSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
