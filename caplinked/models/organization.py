# coding: utf-8

"""
    CapLinked API v1.0

    Core information security endpoints for managing files/folders, users/groups, uploads/downloads, and more.

    OpenAPI spec version: 2017-05-23
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Organization(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'location': 'str',
        'billing_email': 'str',
        'url': 'str',
        'support_number': 'str',
        'support_email': 'str',
        'support_website': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'location': 'location',
        'billing_email': 'billing_email',
        'url': 'url',
        'support_number': 'support_number',
        'support_email': 'support_email',
        'support_website': 'support_website',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, description=None, location=None, billing_email=None, url=None, support_number=None, support_email=None, support_website=None, created_at=None, updated_at=None):
        """
        Organization - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._description = None
        self._location = None
        self._billing_email = None
        self._url = None
        self._support_number = None
        self._support_email = None
        self._support_website = None
        self._created_at = None
        self._updated_at = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if location is not None:
          self.location = location
        if billing_email is not None:
          self.billing_email = billing_email
        if url is not None:
          self.url = url
        if support_number is not None:
          self.support_number = support_number
        if support_email is not None:
          self.support_email = support_email
        if support_website is not None:
          self.support_website = support_website
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def id(self):
        """
        Gets the id of this Organization.

        :return: The id of this Organization.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Organization.

        :param id: The id of this Organization.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Organization.

        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Organization.

        :param name: The name of this Organization.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Organization.

        :return: The description of this Organization.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Organization.

        :param description: The description of this Organization.
        :type: str
        """

        self._description = description

    @property
    def location(self):
        """
        Gets the location of this Organization.

        :return: The location of this Organization.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Organization.

        :param location: The location of this Organization.
        :type: str
        """

        self._location = location

    @property
    def billing_email(self):
        """
        Gets the billing_email of this Organization.

        :return: The billing_email of this Organization.
        :rtype: str
        """
        return self._billing_email

    @billing_email.setter
    def billing_email(self, billing_email):
        """
        Sets the billing_email of this Organization.

        :param billing_email: The billing_email of this Organization.
        :type: str
        """

        self._billing_email = billing_email

    @property
    def url(self):
        """
        Gets the url of this Organization.

        :return: The url of this Organization.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Organization.

        :param url: The url of this Organization.
        :type: str
        """

        self._url = url

    @property
    def support_number(self):
        """
        Gets the support_number of this Organization.

        :return: The support_number of this Organization.
        :rtype: str
        """
        return self._support_number

    @support_number.setter
    def support_number(self, support_number):
        """
        Sets the support_number of this Organization.

        :param support_number: The support_number of this Organization.
        :type: str
        """

        self._support_number = support_number

    @property
    def support_email(self):
        """
        Gets the support_email of this Organization.

        :return: The support_email of this Organization.
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """
        Sets the support_email of this Organization.

        :param support_email: The support_email of this Organization.
        :type: str
        """

        self._support_email = support_email

    @property
    def support_website(self):
        """
        Gets the support_website of this Organization.

        :return: The support_website of this Organization.
        :rtype: str
        """
        return self._support_website

    @support_website.setter
    def support_website(self, support_website):
        """
        Sets the support_website of this Organization.

        :param support_website: The support_website of this Organization.
        :type: str
        """

        self._support_website = support_website

    @property
    def created_at(self):
        """
        Gets the created_at of this Organization.

        :return: The created_at of this Organization.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Organization.

        :param created_at: The created_at of this Organization.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Organization.

        :return: The updated_at of this Organization.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Organization.

        :param updated_at: The updated_at of this Organization.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
